cmake_minimum_required(VERSION 3.28)
project(DataStructure_YWM_2nd C)
include_directories(${CMAKE_CURRENT_SOURCE_DIR})
set(CMAKE_C_STANDARD 11)

add_executable(DataStructure_YWM_2nd
#        main.c
        basic.h
        dotcpp_ds/oj/tree/1697-二叉链表存储的二叉树.c
        #        dotcpp_ds/oj/stack_and_queue/1681-行编辑程序.c
        #        BJFUOJ/232.c
#        dotcpp_ds/oj/link_list/1052-合并链表.c
#        dotcpp_ds/oj/link_list/1585-链表数据求和操作.c
#        dotcpp_ds/oj/link_list/1676-链表的基本操作.c
#        dotcpp_ds/oj/link_list/1673-集合union.c
#        "dotcpp_ds/oj/stack_and_queue/1680-八进制数.c"
        #        BJFUOJ/231.c
        #        BJFUOJ/228.c
#        BJFUOJ/229.c
#        BJFUOJ/230.c
        #        tsinghua_dsa/mooc_ds_part1/pa1/1-range_query.c
        #        BJFUOJ/227.c
        #        Leetcode/LeetCode75/1372.longest-zigzag-path-in-a-binary-tree.c
        #        Leetcode/LeetCode75/104.maximum-depth-of-binary-tree.c
#        Leetcode/LeetCode75/872.leaf-similar-trees.c
#        Leetcode/LeetCode75/1448.count-good-nodes-in-binary-tree.c
#        Leetcode/LeetCode75/437.path-sum-iii.c
        #        BJFUOJ/218.c
#        BJFUOJ/219.c
        #        Leetcode/LeetCode75/394.decode-string.c
#        Leetcode/LeetCode75/933.number-of-recent-calls.c
#        Leetcode/LeetCode75/649.dota2-senate.c
        #        Leetcode/LeetCode75/2390.removing-stars-from-a-string.c
#        Leetcode/LeetCode75/735.asteroid-collision.c
        #        Leetcode/LeetCode75/1207.unique-number-of-occurrences.c
#        Leetcode/LeetCode75/1657.determine-if-two-strings-are-close.c
#        Leetcode/LeetCode75/2352.equal-row-and-column-pairs.c
#                BJFUOJ/226.c
#        Leetcode/LeetCode75/2095.delete-the-middle-node-of-a-linked-list.c
#        Leetcode/LeetCode75/328.odd-even-linked-list.c
#        Leetcode/LeetCode75/206.reverse-linked-list.c
#        Leetcode/LeetCode75/2130.maximum-twin-sum-of-a-linked-list.c
#        Leetcode/LeetCode75/1732.find-the-highest-altitude.c
#        Leetcode/LeetCode75/724.find-pivot-index.c
#        Leetcode/LeetCode75/2215.find-the-difference-of-two-arrays.c
        #        BJFUOJ/216.c
#        BJFUOJ/217.c
#        BJFUOJ/223.c
#        BJFUOJ/225.c
        #        BJFUOJ/214.c
#        BJFUOJ/215.c
#        Leetcode/148.sort-list.c
#        Leetcode/21.merge-two-sorted-lists.c
        #        Leetcode/LeetCode75/1456.maximum-number-of-vowels-in-a-substring-of-given-length.c
#        Leetcode/LeetCode75/1004.max-consecutive-ones-iii.c
        #        Leetcode/LeetCode75/643.maximum-average-subarray-i.c
        #        Leetcode/LeetCode75/1679.max-number-of-k-sum-pairs.c
        #        Leetcode/LeetCode75/11.container-with-most-water.c
        #        Leetcode/LeetCode75/392.is-subsequence.c
        #        Leetcode/LeetCode75/345.reverse-vowels-of-a-string.c
#        Leetcode/LeetCode75/151.reverse-words-in-a-string.c
#        Leetcode/LeetCode75/238.product-of-array-except-self.c
#        Leetcode/LeetCode75/334.increasing-triplet-subsequence.c
#        Leetcode/LeetCode75/443.string-compression.c
#        Leetcode/LeetCode75/283.move-zeroes.c
        #        Leetcode/LeetCode75/605.can-place-flowers.c
        #        BJFUOJ/contest/697/A.c
#        Leetcode/LeetCode75/1768.merge-strings-alternately.c
#        Leetcode/LeetCode75/1071.greatest-common-divisor-of-strings.c
#        Leetcode/LeetCode75/1431.kids-with-the-greatest-number-of-candies.c
        #        Leetcode/93.restore-ip-addresses.c
        #        Leetcode/47.permutations-ii.c
#        Leetcode/77.combinations.c
#        Leetcode/146.lru-cache.c
#        BJFUOJ/275.c
#        BJFUOJ/276.c
#        BJFUOJ/277.c
#        BJFUOJ/278.c
#        BJFUOJ/279.c
#        Leetcode/207.course-schedule.c
#        Leetcode/210.course-schedule-ii.c
        #        BJFUOJ/206.c
#        BJFUOJ/207.c
#        BJFUOJ/208.c
#        BJFUOJ/209.c
#        BJFUOJ/210.c
#        BJFUOJ/211.c
#        BJFUOJ/212.c
#        BJFUOJ/213.c
#        Leetcode/36.valid-sudoku.c
#        Leetcode/15.3sum.c
#        Leetcode/46.permutations.c
#        Leetcode/39.combination-sum.c
#        Leetcode/40.combination-sum-ii.c
        #        BJFUOJ/204.c
#        BJFUOJ/205.c
        #        chap2/ds/array_list.h
#        chap2/ds/single_linked_list.h
#        chap2/ds/loop_list.h
#        chap2/ds/loop_list.c
#        chap2/ds/loop_list_test.c
#        chap2/leetcode/easy/160-intersection-of-two-linked-lists.c
#        chap2/leetcode/easy/203-remove-linked-list-elements.c
#        chap2/leetcode/easy/206-reverse-linked-list.c
#        chap2/leetcode/easy/234-palindrome-linked-list.c
#        chap3/ds/array_stack.h
#        chap3/ds/array_stack.c
#        chap3/ds/linked_stack.h
#        chap3/ds/linked_stack.c
#        chap3/ds/array_loop_queue.h
#        chap3/ds/array_loop_queue.c
#        chap3/ds/linked_queue.h
#        chap3/ds/linked_queue.c
#        chap5/ds/binary_tree.h
#        chap5/ds/binary_tree.c
#        chap5/ds/btree_test.c
#        chap5/ds/btnode_stack.h
#        chap5/ds/btnode_stack.c
#        chap5/ds/btnode.h
#        chap5/ds/btnode_queue.h
#        chap5/ds/btnode_queue.c
#        chap5/ds/huffman_tree.h
#        chap5/ds/huffman_tree.c
#        chap5/ds/huffman_tree_test.c
#        chap5/leetcode/easy/94-binary-tree-inorder-traversal.c
#        chap5/leetcode/easy/100-same-tree.c
#        chap5/leetcode/easy/101-symmetric-tree.c
#        chap5/leetcode/easy/104-maximum-depth-of-binary-tree.c
#        chap6/ds/adjacency_matrix_graph.h
#        chap6/ds/adjacency_matrix_graph_test.c
#        chap6/ds/adjacency_matrix_graph.c
#        chap6/ds/adjacency_list_graph.h
#        chap6/ds/adjacency_list_graph.c
#        chap6/ds/adjacency_list_graph_test.c
#        chap6/ds/orthogonal_list_graph.h
#        chap6/ds/orthogonal_list_graph.c
#        chap6/ds/orthogonal_list_graph_test.c
#        chap6/ds/adjacency_multi_list_graph.h
#        chap6/ds/adjacency_multi_list_graph.c
#        chap7/ds/sequence_table_search.c
#        chap7/ds/binary_search_tree.c
#        chap7/ds/avl_tree.c
#        chap7/ds/b_bree.c
#        chap7/ds/hash_table_opening_address.c
#        chap7/exp/287.c
#        chap7/exp/288.c
#        chap7/exp/289.c
#        chap7/exp/290.c
#        chap7/exp/291.c
#        chap8/ds/sorting.c
        #        chap6/ds/adjacency_multi_list_graph_test.c
        #        "chap3/example/3.1 base_convert.c"
#        "chap3/example/3.2 bracket_match.c"
#        "chap3/example/3.3 calculate_expression.c"
#        "chap3/example/3.4 dancing partner.c"
#        "chap3/exercise/algo design/1-double_stack_in_one_array.c"
#        "chap3/exercise/algo design/2-palindrome-stack-judge.c"
#        "chap3/exercise/algo design/4-postfix_expression_calc.c"
#        "chap3/exercise/algo design/3-integer_stack.c"
#        "chap3/exercise/algo design/5-stack_io_legal_ascertain.c"
#        chap3/exp/240.c
#        chap3/exp/247.c
#        "chap4/example/4.1 virus_detect.c"
#        chap4/exp/256.c
#        chap4/exp/257.c
#        chap4/exp/258.c
#        chap4/exp/259.c
#        chap4/exp/260.c
        #        chap2/ds/two_direct_list.h
#        chap2/ds/array_list.c
#        chap2/array_list_merge.c
#        chap2/ds/single_linked_list.c
#        chap2/exp/216.c
#        chap2/exp/217.c
#        chap2/exp/218.c
#        chap2/exp/219.c
#        chap2/exp/220.c
#        chap2/exp/221.c
#        chap2/exp/222.c
#        chap2/exp/223.c
#        chap2/leetcode/easy/21-merge-two-sorted-lists.c
#        chap2/leetcode/easy/83-remove-duplicates-from-sorted-list.c
#        chap2/leetcode/easy/141-linked-list-cycle.c
        #        chap2/example/2.1_array_unary_poly.c
#        chap2/example/2.2_sparse_poly.c
#        chap2/exp/arr_book.c
#        chap2/exp/linked_list_tmpl.c
#        chap2/exp/214.c
#        chap2/exp/215.c
        #        chap2/single_linked_list_merge.c
        #        chap2/single_linked_list_test.c
)

